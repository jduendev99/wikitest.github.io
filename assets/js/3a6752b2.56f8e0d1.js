"use strict";(self.webpackChunkwiki=self.webpackChunkwiki||[]).push([[4468],{24112:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>l,contentTitle:()=>c,default:()=>h,frontMatter:()=>s,metadata:()=>o,toc:()=>d});var i=n(17624),r=n(4552);const s={sidebar_position:1,sidebar_label:"Data Types in JS"},c="Data Types in JavaScript",o={id:"js-tips/data-type-in-js",title:"Data Types in JavaScript",description:"In JavaScript, a primitive (primitive value, primitive data type) is data that is not an object and has no methods or properties. There are 7 primitive data types:",source:"@site/docs/js-tips/data-type-in-js.md",sourceDirName:"js-tips",slug:"/js-tips/data-type-in-js",permalink:"/wiki/docs/js-tips/data-type-in-js",draft:!1,unlisted:!1,editUrl:"https://github.com/actionanand/wiki/docs/js-tips/data-type-in-js.md",tags:[],version:"current",sidebarPosition:1,frontMatter:{sidebar_position:1,sidebar_label:"Data Types in JS"},sidebar:"tutorialSidebar",previous:{title:"JS Tips",permalink:"/wiki/docs/category/js-tips"},next:{title:"Array.from()",permalink:"/wiki/docs/js-tips/array-from"}},l={},d=[];function a(e){const t={admonition:"admonition",code:"code",h1:"h1",li:"li",p:"p",pre:"pre",strong:"strong",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",ul:"ul",...(0,r.M)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(t.h1,{id:"data-types-in-javascript",children:"Data Types in JavaScript"}),"\n",(0,i.jsxs)(t.p,{children:["In JavaScript, a primitive (primitive value, primitive data type) is data that is not an object and has no methods or properties. There are ",(0,i.jsx)(t.strong,{children:"7 primitive"})," data types:"]}),"\n",(0,i.jsxs)(t.p,{children:[(0,i.jsx)(t.code,{children:"string"}),", ",(0,i.jsx)(t.code,{children:"number"}),", ",(0,i.jsx)(t.code,{children:"bigint"}),", ",(0,i.jsx)(t.code,{children:"boolean"}),", ",(0,i.jsx)(t.code,{children:"undefined"}),", ",(0,i.jsx)(t.code,{children:"symbol"})," and ",(0,i.jsx)(t.code,{children:"null"})]}),"\n",(0,i.jsx)(t.p,{children:"All primitives are immutable. It is important not to confuse a primitive itself with a variable assigned a primitive value. It is important not to confuse a primitive itself with a variable assigned a primitive value."}),"\n",(0,i.jsx)(t.admonition,{type:"tip",children:(0,i.jsxs)(t.p,{children:["All ",(0,i.jsx)(t.strong,{children:"primitive"})," types, ",(0,i.jsxs)(t.strong,{children:["except ",(0,i.jsx)(t.code,{children:"null"})]}),", can be tested by the ",(0,i.jsx)(t.code,{children:"typeof"})," operator, because ",(0,i.jsx)(t.code,{children:"typeof null"})," returns ",(0,i.jsx)(t.code,{children:"object"}),", so one has to use ",(0,i.jsx)(t.code,{children:"=== null"})," to test for ",(0,i.jsx)(t.code,{children:"null"}),"."]})}),"\n",(0,i.jsxs)(t.p,{children:["All primitive types, except ",(0,i.jsx)(t.code,{children:"null"})," and ",(0,i.jsx)(t.code,{children:"undefined"}),", have their corresponding ",(0,i.jsx)(t.strong,{children:"object wrapper"})," types, which provide useful methods for working with the primitive values. For example, the ",(0,i.jsxs)(t.strong,{children:[(0,i.jsx)(t.code,{children:"Number"})," object"]})," (object wrapper of ",(0,i.jsx)(t.code,{children:"number"}),") provides methods like ",(0,i.jsx)(t.code,{children:"toExponential()"}),". When a property is accessed on a primitive value, JavaScript automatically wraps the value into the corresponding wrapper object and accesses the property on the object instead.  However, accessing a property on null or undefined throws a TypeError exception."]}),"\n",(0,i.jsxs)(t.table,{children:[(0,i.jsx)(t.thead,{children:(0,i.jsxs)(t.tr,{children:[(0,i.jsx)(t.th,{style:{textAlign:"center"},children:(0,i.jsx)(t.strong,{children:"Type"})}),(0,i.jsx)(t.th,{style:{textAlign:"center"},children:(0,i.jsxs)(t.strong,{children:[(0,i.jsx)(t.code,{children:"typeof"})," return value"]})}),(0,i.jsx)(t.th,{style:{textAlign:"center"},children:(0,i.jsx)(t.strong,{children:"Object wrapper"})})]})}),(0,i.jsxs)(t.tbody,{children:[(0,i.jsxs)(t.tr,{children:[(0,i.jsx)(t.td,{style:{textAlign:"center"},children:"null"}),(0,i.jsx)(t.td,{style:{textAlign:"center"},children:"object"}),(0,i.jsx)(t.td,{style:{textAlign:"center"},children:"N/A"})]}),(0,i.jsxs)(t.tr,{children:[(0,i.jsx)(t.td,{style:{textAlign:"center"},children:"undefined"}),(0,i.jsx)(t.td,{style:{textAlign:"center"},children:"undefined"}),(0,i.jsx)(t.td,{style:{textAlign:"center"},children:"N/A"})]}),(0,i.jsxs)(t.tr,{children:[(0,i.jsx)(t.td,{style:{textAlign:"center"},children:"number"}),(0,i.jsx)(t.td,{style:{textAlign:"center"},children:"number"}),(0,i.jsx)(t.td,{style:{textAlign:"center"},children:"Number"})]}),(0,i.jsxs)(t.tr,{children:[(0,i.jsx)(t.td,{style:{textAlign:"center"},children:"bigint"}),(0,i.jsx)(t.td,{style:{textAlign:"center"},children:"bigint"}),(0,i.jsx)(t.td,{style:{textAlign:"center"},children:"BigInt"})]}),(0,i.jsxs)(t.tr,{children:[(0,i.jsx)(t.td,{style:{textAlign:"center"},children:"boolean"}),(0,i.jsx)(t.td,{style:{textAlign:"center"},children:"boolean"}),(0,i.jsx)(t.td,{style:{textAlign:"center"},children:"Boolean"})]}),(0,i.jsxs)(t.tr,{children:[(0,i.jsx)(t.td,{style:{textAlign:"center"},children:"string"}),(0,i.jsx)(t.td,{style:{textAlign:"center"},children:"string"}),(0,i.jsx)(t.td,{style:{textAlign:"center"},children:"String"})]}),(0,i.jsxs)(t.tr,{children:[(0,i.jsx)(t.td,{style:{textAlign:"center"},children:"symbol"}),(0,i.jsx)(t.td,{style:{textAlign:"center"},children:"symbol"}),(0,i.jsx)(t.td,{style:{textAlign:"center"},children:"Symbol"})]})]})]}),"\n",(0,i.jsxs)(t.ul,{children:["\n",(0,i.jsxs)(t.li,{children:["\n",(0,i.jsxs)(t.p,{children:["The ",(0,i.jsx)(t.code,{children:"typeof"})," operator in JavaScript returns a ",(0,i.jsx)(t.strong,{children:"string"})," indicating the type of the operand's value. All ",(0,i.jsx)(t.strong,{children:"primitive types"}),", except ",(0,i.jsx)(t.code,{children:"null"})," will return the same data type. Others will return either ",(0,i.jsx)(t.code,{children:"object"})," (",(0,i.jsx)(t.code,{children:"Array"}),", and ",(0,i.jsx)(t.code,{children:"Date"})," included) and ",(0,i.jsx)(t.code,{children:"function"}),"."]}),"\n"]}),"\n",(0,i.jsxs)(t.li,{children:["\n",(0,i.jsxs)(t.p,{children:["Note that the typeof operator returns ",(0,i.jsx)(t.code,{children:"object"})," for ",(0,i.jsx)(t.strong,{children:"arrays"}),", ",(0,i.jsx)(t.strong,{children:"null"})," and ",(0,i.jsx)(t.strong,{children:"functions"}),". This is because arrays are objects in JavaScript, and ",(0,i.jsx)(t.code,{children:"null"})," and ",(0,i.jsx)(t.code,{children:"function"})," are ",(0,i.jsx)(t.strong,{children:"special types of objects"}),"."]}),"\n"]}),"\n"]}),"\n",(0,i.jsxs)(t.p,{children:["Here are some examples of how to use the ",(0,i.jsx)(t.code,{children:"typeof"})," operator:"]}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-js",children:"typeof 1; // returns 'number'\ntypeof 37n; // returns 'bigint'\ntypeof 'hello'; // returns 'string'\ntypeof true; // returns 'boolean'\ntypeof undefined; // returns 'undefined'\ntypeof null; // returns 'object'\ntypeof []; // returns 'object'\ntypeof function() {}; // returns 'function'\ntypeof Date; // returns 'function'\ntypeof new Date();  // returns 'object'\ntypeof Object; // returns 'function'\ntypeof new Object(); // returns 'object'\n"})}),"\n",(0,i.jsxs)(t.p,{children:[(0,i.jsx)(t.code,{children:"function"})," is a ",(0,i.jsx)(t.strong,{children:"Function object"})," and ",(0,i.jsx)(t.code,{children:"object"}),"(with small cap) is an ",(0,i.jsx)(t.strong,{children:"Object object"}),". So both are object only. ",(0,i.jsx)(t.code,{children:"Object"})," (with capital 'O') is just a constructor function."]}),"\n",(0,i.jsxs)(t.p,{children:["A function is an instance of Function, so that makes a function an object. i.e, ",(0,i.jsx)(t.code,{children:"Function"})," constructs an ",(0,i.jsx)(t.code,{children:"object"})," which is a function."]})]})}function h(e={}){const{wrapper:t}={...(0,r.M)(),...e.components};return t?(0,i.jsx)(t,{...e,children:(0,i.jsx)(a,{...e})}):a(e)}},4552:(e,t,n)=>{n.d(t,{I:()=>o,M:()=>c});var i=n(11504);const r={},s=i.createContext(r);function c(e){const t=i.useContext(s);return i.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function o(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:c(e.components),i.createElement(s.Provider,{value:t},e.children)}}}]);